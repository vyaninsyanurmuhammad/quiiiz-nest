// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id       String   @id @default(uuid())
  username String   @unique @default(cuid())
  name     String   @db.VarChar(255)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  Account Account?

  @@map("users")
}

model Account {
  id        String   @id @default(uuid())
  accountId String   @unique @default(cuid())
  userId    String   @unique @map("user_id")
  email     String   @unique @db.VarChar(100)
  password  String?  @db.VarChar(100)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  History History[]

  @@map("accounts")
}

model Quiz {
  id       String   @id @default(uuid())
  quizId   String   @unique @default(cuid())
  topic    String   @db.VarChar(100)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  Question Question[]
  History  History[]

  @@map("quizes")
}

model Question {
  id         String   @id @default(uuid())
  questionId String   @unique @default(cuid())
  question   String
  options    Json
  answer     String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt
  quizId     String   @map("quiz_id")

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  Answer Answer[]

  @@index([quizId])
  @@map("questions")
}

model History {
  id          String    @id @default(uuid())
  hisyoryId   String    @unique @default(cuid())
  quizId      String    @map("quiz_id")
  timeStarted DateTime?
  timeEnded   DateTime?
  score       Float?
  accountId   String    @map("user_id")
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  quiz    Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  Answer Answer[]

  @@index([accountId, quizId])
  @@map("histories")
}

model Answer {
  id         String   @id @default(uuid())
  answerId   String   @unique @default(cuid())
  historyId  String   @map("history_Id")
  questionId String   @map("question_id")
  answer     String
  isCorrect  Boolean
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  history  History  @relation(fields: [historyId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([historyId, questionId])
  @@map("answers")
}
